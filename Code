import pandas as pd
import logging
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

# Setup logging for error handling
logging.basicConfig(filename='automation_errors.log',
                    level=logging.ERROR, 
                    format='%(asctime)s - %(levelname)s - %(message)s')


def read_and_analyze_data(file_path):
    """Reads sales data from a CSV and generates a summary report."""
    try:
        # Read data from the CSV file
        data = pd.read_csv(file_path)
        
        # Perform data analysis (total sales by region)
        report_data = data.groupby('region')['sales'].sum()
        
        # Save the report to a CSV file
        report_data.to_csv('sales_report.csv')
        
        return report_data
    
    except Exception as e:
        logging.error(f"Error reading or analyzing sales data: {e}")
        return None


def generate_pdf_report(report_data, filename):
    """Generates a PDF report from the data and saves it to a file."""
    try:
        # Create a PDF file
        c = canvas.Canvas(filename, pagesize=letter)
        width, height = letter
        
        # Set title
        c.setFont("Helvetica-Bold", 16)
        c.drawString(100, height - 50, "Sales Report")
        
        # Set body text
        c.setFont("Helvetica", 12)
        y_position = height - 100
        
        # Write each row of the report data
        for region, sales in report_data.items():
            c.drawString(100, y_position, f"Region: {region}, Sales: ${sales}")
            y_position -= 20  # Move down for the next line
        
        # Save the PDF
        c.save()
    
    except Exception as e:
        logging.error(f"Error generating PDF report: {e}")


def send_email_with_attachment(email_sender, email_receiver, subject, body, attachment_path):
    """Sends an email with an attached file."""
    try:
        # Create the email object
        msg = MIMEMultipart()
        msg['From'] = email_sender
        msg['To'] = email_receiver
        msg['Subject'] = subject

        # Attach body text
        msg.attach(MIMEText(body, 'plain'))

        # Attach the file
        with open(attachment_path, 'rb') as attachment:
            part = MIMEBase('application', 'octet-stream')
            part.set_payload(attachment.read())
            encoders.encode_base64(part)
            part.add_header('Content-Disposition', f'attachment; filename={attachment_path}')
            msg.attach(part)

        # Send the email
        server = smtplib.SMTP('smtp.example.com', 587)
        server.starttls()
        server.login(email_sender, 'yourpassword')
        server.sendmail(email_sender, email_receiver, msg.as_string())
        server.quit()

    except Exception as e:
        logging.error(f"Error sending email: {e}")


# Main execution flow
if __name__ == "__main__":
    # File paths and email details
    data_file = 'sales_data.csv'
    email_sender = 'youremail@example.com'
    email_receiver = 'recipient@example.com'
    subject = 'Automated Sales Report'
    body = 'Please find the attached sales report in both CSV and PDF formats.'

    # Step 1: Read and analyze data
    report_data = read_and_analyze_data(data_file)

    if report_data is not None:
        # Step 2: Generate CSV and PDF reports
        generate_pdf_report(report_data, 'sales_report.pdf')

        # Step 3: Send the report via email with both CSV and PDF attachments
        send_email_with_attachment(email_sender, email_receiver, subject, body, 'sales_report.csv')
        send_email_with_attachment(email_sender, email_receiver, subject, body, 'sales_report.pdf')

